{"version":3,"sources":["components/DisplayChild.js","components/Display.js","components/Calculator.js","index.js"],"names":["DisplayChild","_ref","func","text","react_default","a","createElement","defaultProps","Display","CASES_REPORTED_PER_ACTUAL_CASE","odds","_this$props","_this","props","population","dailyCases","daysContagious","percentReported","group","circulatingCases","prob","Math","pow","toFixed","className","components_DisplayChild","this","Component","Calculator","DAYS_CONTAGIOUS_DEFAULT","PERCENT_REPORTED","state","populationValue","dailyCasesValue","groupValue","daysContagiousValue","percentReportedValue","handlePopulationChange","value","setState","handleDailyCasesChange","handleDaysContagiousChange","handlePartReportedChange","handlegroupChange","_this$state","toLocaleString","js_default","step","maxValue","minValue","onChange","components_Display","ReactDOM","render","components_Calculator","document","getElementById"],"mappings":"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","file":"static/js/main.f96d9770.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst DisplayChild = ({ func, text }) => {\n  return (\n    <span>\n      {func} <small>{text}</small>\n    </span>\n  );\n};\n\nDisplayChild.defaultProps = {\n  func: () => <p>Missing numeric value</p>,\n  text: \"No value provided\"\n};\n\nDisplayChild.propTypes = {\n  func: PropTypes.object.isRequired,\n  text: PropTypes.string.isRequired\n};\n\nexport default DisplayChild;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport DisplayChild from \"./DisplayChild\";\n\nclass Display extends Component {\n  CASES_REPORTED_PER_ACTUAL_CASE = 0.05;\n  // 1 in 20\n\n  odds = () => {\n    // https://marginalrevolution.com/marginalrevolution/2020/03/covid-19-event-risk-assessment-planner.html\n    const {\n      population,\n      dailyCases,\n      daysContagious,\n      percentReported,\n      group,\n    } = this.props;\n    const circulatingCases = (dailyCases * daysContagious) / (percentReported / 100);\n    const prob = 1 - Math.pow(1 - (circulatingCases / population), group);\n\n    if (prob >= 0.9999) {\n      // Never be 100% sure of anything...\n      return <p>{\">\"}99.99%</p>;\n    }\n\n    // Nice formatting\n    return <p>{(prob * 100).toFixed(2)}%</p>;\n  };\n\n  render() {\n    return (\n      <div className=\"flex\">\n        <DisplayChild func={this.odds()} text=\"chance someone has COVID\" />\n      </div>\n    );\n  }\n}\n\nDisplay.propTypes = {\n  dailyCasesValue: PropTypes.number.isRequired,\n  populationValue: PropTypes.number.isRequired,\n  daysContagious: PropTypes.number.isRequired,\n  percentReported: PropTypes.number.isRequired,\n  groupValue: PropTypes.number.isRequired,\n};\n\nexport default Display;\n","import React, { Component } from \"react\";\nimport InputRange from \"react-input-range\";\nimport Display from \"./Display\";\n\nimport \"../styles/Calculator.css\";\nimport \"react-input-range/lib/css/index.css\";\n\nclass Calculator extends Component {\n\n  DAYS_CONTAGIOUS_DEFAULT = 10;\n  /*\n   * Use this multiplier to convert dailyCases per day to the number of circulating cases. This\n   * default the following...\n   * 1. A patient is infectious for 3 days before the onset of symptoms [a] and 7 days after [2].\n   *    a. https://www.acpjournals.org/doi/10.7326/M20-0504\n   *    b. https://www.thelancet.com/journals/laninf/article/PIIS1473-3099(20)30196-1/fulltext\n   * 2. Those who test positive for COVID19 do not change their behavior after testing positive.\n   *    This is a bad assumption but I haven't yet found data on number of days after onset of\n   *    symptoms someone gets tested or the portion of people who change their behavior.\n   */\n\n   PERCENT_REPORTED = 10\n   /*\n    * This based on CDC Director Robert Redfield's comment at the end of June [a] that a good rough\n    * estimate of actual cases to reported cases is 10-1.\n    * a. https://www.cdc.gov/media/releases/2020/t0625-COVID-19-update.html\n    */\n\n  state = {\n    populationValue: 19450000, // NY\n    dailyCasesValue: 560, // NY 7-day average (July 14th)\n    groupValue: 25,\n    daysContagiousValue: this.DAYS_CONTAGIOUS_DEFAULT,\n    percentReportedValue: this.PERCENT_REPORTED,\n  };\n\n  handlePopulationChange = (value) => {\n    this.setState({ populationValue: value });\n  };\n  handleDailyCasesChange = (value) => {\n    this.setState({ dailyCasesValue: value });\n  };\n  handleDaysContagiousChange = (value) => {\n    this.setState({ daysContagiousValue: value });\n  };\n  handlePartReportedChange = (value) => {\n    this.setState({ percentReportedValue: value });\n  };\n  handlegroupChange = (value) => {\n    this.setState({ groupValue: value });\n  };\n\n  render() {\n    const {\n      populationValue,\n      dailyCasesValue,\n      daysContagiousValue,\n      percentReportedValue,\n      groupValue,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h4>My state as a population of {populationValue.toLocaleString()}</h4>\n        <InputRange\n          step={50000}\n          maxValue={40000000}\n          minValue={50000}\n          value={populationValue}\n          onChange={this.handlePopulationChange}\n        />\n        <h4>\n          My state has a 7-day rolling average of {dailyCasesValue.toLocaleString()} daily cases\n          per day\n        </h4>\n        <InputRange\n          step={100}\n          maxValue={20000}\n          minValue={0}\n          value={dailyCasesValue}\n          onChange={this.handleDailyCasesChange}\n        />\n        <h4>\n          A person who tested positive for the virus is contagious for{\" \"}\n          {daysContagiousValue} days\n        </h4>\n        <InputRange\n          step={1}\n          maxValue={30}\n          minValue={1}\n          value={daysContagiousValue}\n          onChange={this.handleDaysContagiousChange}\n        />\n        <h4>\n          Only {percentReportedValue}% of cases are reported\n        </h4>\n        <InputRange\n          step={1}\n          maxValue={100}\n          minValue={1}\n          value={percentReportedValue}\n          onChange={this.handlePartReportedChange}\n        />\n        <h4>I'm attending an event with {groupValue.toLocaleString()} people</h4>\n        <InputRange\n          step={1}\n          maxValue={300}\n          minValue={1}\n          value={groupValue}\n          onChange={this.handlegroupChange}\n        />\n        <Display\n          population={populationValue}\n          dailyCases={dailyCasesValue}\n          daysContagious={daysContagiousValue}\n          percentReported={percentReportedValue}\n          group={groupValue}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Calculator from \"./components/Calculator\";\n\nReactDOM.render(<Calculator />, document.getElementById(\"root\"));\n"],"sourceRoot":""}