{"version":3,"sources":["components/DisplayChild.js","components/Display.js","components/Calculator.js","index.js"],"names":["DisplayChild","_ref","func","text","react_default","a","createElement","defaultProps","Display","NEW_CASES_PER_DAY_TO_CIRCULATING","CASES_REPORTED_PER_ACTUAL_CASE","odds","_this$props","_this","props","dailyCases","population","group","cases","prob","Math","pow","toFixed","className","components_DisplayChild","this","Component","Calculator","state","dailyCasesValue","populationValue","groupValue","handledailyCasesChange","value","setState","handlePopulationChange","handlegroupChange","_this$state","js_default","step","maxValue","minValue","onChange","components_Display","ReactDOM","render","components_Calculator","document","getElementById"],"mappings":"iPAGMA,EAAe,SAAAC,GAAoB,IAAjBC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,KAC5B,OACEC,EAAAC,EAAAC,cAAA,YACGJ,EADH,IACSE,EAAAC,EAAAC,cAAA,aAAQH,KAKrBH,EAAaO,aAAe,CAC1BL,KAAM,kBAAME,EAAAC,EAAAC,cAAA,mCACZH,KAAM,qBAQOH,QCyBAQ,6MAzCbC,iCAAmC,KAWnCC,+BAAiC,MAGjCC,KAAO,WAAM,IAAAC,EAE+BC,EAAKC,MAAvCC,EAFGH,EAEHG,WAAYC,EAFTJ,EAESI,WAAYC,EAFrBL,EAEqBK,MAC1BC,EAAQH,EAAaF,EAAKJ,iCAAmCI,EAAKH,+BAClES,EAAO,EAAIC,KAAKC,IAAI,EAAIH,EAAQF,EAAYC,GAClD,OAAOb,EAAAC,EAAAC,cAAA,UAAY,IAAPa,GAAYG,QAAQ,GAAzB,8EAIP,OACElB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,QACbnB,EAAAC,EAAAC,cAACkB,EAAD,CAActB,KAAMuB,KAAKd,OAAQR,KAAK,qCA1BxBuB,aC4DPC,0NAxDbC,MAAQ,CACNC,gBAAiB,IACjBC,gBAAiB,IACjBC,WAAY,MAGdC,uBAAyB,SAAAC,GACvBpB,EAAKqB,SAAS,CAAEL,gBAAiBI,OAEnCE,uBAAyB,SAAAF,GACvBpB,EAAKqB,SAAS,CAAEJ,gBAAiBG,OAEnCG,kBAAoB,SAAAH,GAClBpB,EAAKqB,SAAS,CAAEH,WAAYE,6EAIrB,IAAAI,EACkDZ,KAAKG,MAAtDC,EADDQ,EACCR,gBAAiBC,EADlBO,EACkBP,gBAAiBC,EADnCM,EACmCN,WAE1C,OACE3B,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,OACbnB,EAAAC,EAAAC,cAAA,qDAA6CuB,EAA7C,uBACAzB,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,CACEkC,KAAM,IACNC,SAAU,IACVC,SAAU,EACVR,MAAOJ,EACPa,SAAUjB,KAAKO,yBAEjB5B,EAAAC,EAAAC,cAAA,yCAC+BwB,GAE/B1B,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,CACEkC,KAAM,IACNC,SAAU,IACVC,SAAU,IACVR,MAAOH,EACPY,SAAUjB,KAAKU,yBAEjB/B,EAAAC,EAAAC,cAAA,yCAC+ByB,EAD/B,WAGA3B,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,CACEkC,KAAM,EACNC,SAAU,IACVC,SAAU,EACVR,MAAOF,EACPW,SAAUjB,KAAKW,oBAEjBhC,EAAAC,EAAAC,cAACqC,EAAD,CAAS3B,WAAYc,EAAiBf,WAAYc,EAAiBZ,MAAOc,YAnDzDL,cCHzBkB,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAAgBC,SAASC,eAAe","file":"static/js/main.32f4a3f5.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst DisplayChild = ({ func, text }) => {\n  return (\n    <span>\n      {func} <small>{text}</small>\n    </span>\n  );\n};\n\nDisplayChild.defaultProps = {\n  func: () => <p>Missing numeric value</p>,\n  text: \"No value provided\"\n};\n\nDisplayChild.propTypes = {\n  func: PropTypes.object.isRequired,\n  text: PropTypes.string.isRequired\n};\n\nexport default DisplayChild;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport DisplayChild from \"./DisplayChild\";\n\nclass Display extends Component {\n  NEW_CASES_PER_DAY_TO_CIRCULATING = 10;\n  /*\n   * Use this multiplier to convert dailyCases per day to the number of active dailyCases. This number assumes the following...\n   * 1. A patient is infectious for 3 days before the onset of symptoms [a] and 7 days after [2].\n   *    a. https://www.acpjournals.org/doi/10.7326/M20-0504\n   *    b. https://www.thelancet.com/journals/laninf/article/PIIS1473-3099(20)30196-1/fulltext\n   * 2. Those who test positive for COVID19 do not change their behavior after testing positive.\n   *    This is a bad assumption but I haven't yet found data on number of days after onset of\n   *    symptoms someone gets tested or the portion of people who change their behavior.\n   */\n\n  CASES_REPORTED_PER_ACTUAL_CASE = 0.05\n  // 1 in 20\n\n  odds = () => {\n    // https://marginalrevolution.com/marginalrevolution/2020/03/covid-19-event-risk-assessment-planner.htmljkjkjk\n    const { dailyCases, population, group } = this.props;\n    const cases = dailyCases * this.NEW_CASES_PER_DAY_TO_CIRCULATING / this.CASES_REPORTED_PER_ACTUAL_CASE;\n    const prob = 1 - Math.pow(1 - cases / population, group);\n    return <p>{(prob * 100).toFixed(2)}%</p>;\n  };\n\n  render() {\n    return (\n      <div className=\"flex\">\n        <DisplayChild func={this.odds()} text=\"chance someone has COVID\" />\n        {/* <DisplayChild\n          func={this.calculateMonthlyRepayment()}\n          text=\" monthly repayment\"\n        /> */}\n      </div>\n    );\n  }\n}\n\nDisplay.propTypes = {\n  dailyCasesValue: PropTypes.number.isRequired,\n  populationValue: PropTypes.number.isRequired,\n  groupValue: PropTypes.number.isRequired\n};\n\nexport default Display;\n","import React, { Component } from \"react\";\nimport InputRange from \"react-input-range\";\nimport Display from \"./Display\";\n\nimport \"../styles/Calculator.css\";\nimport \"react-input-range/lib/css/index.css\";\n\nclass Calculator extends Component {\n  state = {\n    dailyCasesValue: 5000,\n    populationValue: 1000000,\n    groupValue: 25\n  };\n\n  handledailyCasesChange = value => {\n    this.setState({ dailyCasesValue: value });\n  };\n  handlePopulationChange = value => {\n    this.setState({ populationValue: value });\n  };\n  handlegroupChange = value => {\n    this.setState({ groupValue: value });\n  };\n\n\n  render() {\n    const { dailyCasesValue, populationValue, groupValue } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h4>My state has a 7-day rolling average of {dailyCasesValue} dailyCases per day</h4>\n        <InputRange\n          step={100}\n          maxValue={20000}\n          minValue={0}\n          value={dailyCasesValue}\n          onChange={this.handledailyCasesChange}\n        />\n        <h4>\n          My state as a population of {populationValue}\n        </h4>\n        <InputRange\n          step={50000}\n          maxValue={10000000}\n          minValue={50000}\n          value={populationValue}\n          onChange={this.handlePopulationChange}\n        />\n        <h4>\n          I'm attending an event with {groupValue} people\n        </h4>\n        <InputRange\n          step={1}\n          maxValue={300}\n          minValue={1}\n          value={groupValue}\n          onChange={this.handlegroupChange}\n        />\n        <Display population={populationValue} dailyCases={dailyCasesValue} group={groupValue} />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Calculator from \"./components/Calculator\";\n\nReactDOM.render(<Calculator />, document.getElementById(\"root\"));\n"],"sourceRoot":""}